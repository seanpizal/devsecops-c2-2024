name: pipeline-ci

on:
  push:
    branches:
      -  feature-*

jobs:
  SAST:
    runs-on: 'ubuntu-latest'
    if: false

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Configuration
        run: |
          sonarcloud_create_project=$(curl -s -u '${{ secrets.SONAR_TOKEN }}:' '${{ secrets.SONAR_HOST_URL }}/api/projects/create' \
            -d 'name=${{ github.event.repository.name }}' \
            -d 'project=${{ github.event.repository.name }}' \
            -d 'organization=${{ github.repository_owner }}' \
            -d 'visibility=public' \
            -w "\n%{http_code}")
          sonarcloud_create_project_status=$(tail -n1 <<< "$sonarcloud_create_project") 
          sonarcloud_create_project_response=$(sed '$ d' <<< "$sonarcloud_create_project")
          if [ $sonarcloud_create_project_status -eq 200 ]; then
            echo "Proyecto ${{ github.event.repository.name }} creado exitosamente en Sonarcloud"
            echo "Se establece rama main como rama por defecto"
            curl -s -u '${{ secrets.SONAR_TOKEN }}:' '${{ secrets.SONAR_HOST_URL }}/api/project_branches/rename' -d 'name=main' -d 'project=${{ github.event.repository.name }}'
          else
            error_msg=$(echo "$sonarcloud_create_project_response" | jq .errors[].msg | sed -e 's/^"//' -e 's/"$//')
            if [[ "$error_msg" == "Could not create Project, key already exists: ${{ github.event.repository.name }}" ]]; then
              echo "Proyecto ya existe en Sonarcloud"
            else
              echo "::error title=API_ERROR::$error_msg"
            fi
          fi

      - name: Install dependencies
        run: npm install

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  SCA:
    # needs: SAST
    runs-on: 'ubuntu-latest'

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install

      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'JSON'
          args: >
            -f HTML
            --disableYarnAudit

      - name: Evaluate Dependency-Check Report
        run: |
          critical_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "CRITICAL")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          high_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "HIGH")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          medium_vulnerabilities=$(jq '[ .dependencies[].vulnerabilities[]? | select(.severity?|ascii_upcase == "MEDIUM")] | length' ${{github.workspace}}/reports/dependency-check-report.json)
          if [ $critical_vulnerabilities -gt 0 ]; then
            echo "::error title=SCA::Se han encontrado $critical_vulnerabilities vulnerabilidades Criticas"
          elif [ $high_vulnerabilities -gt 0 ]; then
            echo "::error title=SCA::Se han encontrado $high_vulnerabilities vulnerabilidades Altas"
          elif [ $medium_vulnerabilities -gt 0 ]; then
            echo "::error title=SCA::Se han encontrado $high_vulnerabilities vulnerabilidades Medias"
          else
            echo "No se han encontrado vulnerabilidades"
          fi